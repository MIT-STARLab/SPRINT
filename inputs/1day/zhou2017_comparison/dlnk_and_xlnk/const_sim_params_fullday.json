{
    "version": "0.6",
    "sim_run_params": {
        "start_utc": "2016-02-14T04:00:00.000000Z",
        "end_utc": "2016-02-15T04:00:00.000000Z",
        "restore_from_checkpoint": false,
        "restore_pkl_name": "pickles/sim_checkpoint_2016_02_14T11_45_00.pkl",
        "sim_tick_s": 10,
        "pickle_checkpoints": true,
        "checkpoint_spacing_s": 900,
        "sat_schedule_hotstart": true,
        "_comments": [
            "the sim tick should be larger than the minimum activity window length allowed by the GP for scheduling"
        ]
    },
    "gp_wrapper_params": {
        "restore_gp_output_from_pickle" :  false,
        "pickle_gp_output" :  false,
        "gp_output_pickle_to_restore" :  "pickles/gp_output_2018-05-16T21_02_42.778960.pkl",
        "gp_path" :  "../../access_global_planner",
        "gp_params": {
            "_comments": [
                "planning_past_horizon_mins allows us to look back at windows in the past in the global planner.  not sure this is useful because you can't make decisions about the scheduling of those windows.",
                "planning_horizon_fixed allows us to fix a certain period of time up to which no new data routes can introduce new activity windows. Note that this should be at least as long as the time required to run the GP (so that we're not planning for windows that will be stale immediately post-execution!)",
                "planning_horizon_obs_xlnk specifies how far forward to look for observation windows",
                "planning_horizon_obs_xlnk specifies how far forward to look for cross-link windows",
                "planning_horizon_dlnk specifies how far forward to look for downlink windows. generally want this to be large because down links have more bandwidth than cross-links and you want to give the satellite the option to wait to downlink instead of just cross-linking",
                "210 minutes is two orbits for 1000 km altitude",
                "max_num_dlnks_allowed_after_planning_end_xlnk is how many additional dlnks are allowed to be used for routing after planning_end_xlnk, for each sat. If large, this can vastly increase number of routes considered"
            ],
            "planning_past_horizon_mins" :  0,
            "planning_horizon_fixed_mins" : 0,
            "planning_horizon_obs_mins" :  210,
            "planning_horizon_xlnk_mins" :  210,
            "planning_horizon_dlnk_mins" :  840,
            "max_num_dlnks_allowed_after_planning_end_xlnk": 3
        }
    },
    "lp_wrapper_params": {
        "lp_params": {
            "_comments": [
                "planning_leaving_flow_start_mins specifies the earliest time at which we can consider an outgoing (transmission) activity window to be available for re-routing with any data. this should be greater than the release time (replan_release_wait_time_s) for the satellite schedule arbiter, so that we don't choose too late to different data through a given activity window",
                "planning_horizon_fixed specifies how far ahead the local planner should look"
            ],
            "planning_leaving_flow_start_mins" :  1.1,
            "planning_horizon_mins" :  210
        }
    },
    "lp_general_params": {
        "_comments": [
            "existing_utilization_epsilon is the extra utilization allowed for existing routes so that they don't miss the minimum required dv due to roundoff error. It also functions as a general round off precision bound. It should definitely be larger than the integer integer_feasibility_tolerance",
            "min_latency_for_sf_1_mins: this is the mimimum latency requirement for the highest latency score factor, 1.0. If multiple routes/dlnks for a single obs have latency less than this, they will both have sf 1.0"
        ],
        "dv_epsilon_Mb" :  0.1,
        "inflow_dv_minimum_Mb" :  5,
        "existing_utilization_epsilon" :  0.001,
        "solver_name" :  "gurobi",
        "solver_params": {
            "run_remotely" :   false,
            "max_runtime_s" : 1000,
            "optimality_gap" :  1e-3,
            "integer_feasibility_tolerance" :  1e-5,
            "gurobi": {
                "_helpful_links": [
                    "http://www.gurobi.com/documentation/7.5/refman/intfeastol.html#parameter:IntFeasTol",
                    "http://www.gurobi.com/documentation/7.5/refman/mipgap2.html#parameter:MIPGap",
                    "http://www.gurobi.com/documentation/7.5/refman/timelimit.html#parameter:TimeLimit"
                ]
            },
            "cplex": {
                "_helpful_links": [
                    "https://www.ibm.com/support/knowledgecenter/SSSA5P_12.8.0/ilog.odms.cplex.help/CPLEX/Parameters/topics/introListAlpha.html"
                ]
            }
        },
        "obj_weights": {
            "flow_dv": 1.0,
            "existing_flow_dv": 1.0,
            "existing_flow_indicators": 1.0,
            "injected_inflow_dv": 0,
            "injected_inflow_indicators": 0,
            "injected_obs_latency": 5.0,
            "energy_storage": 0
        },
        "min_latency_for_sf_1_mins" :  10,
        "latency_calculation": {
            "dlnk": "center",
            "obs": "center"
        }
    },
    "sim_gs_params": {
        "_comment": "currently params are same for every gs",
        "time_epsilon_s": 1
    },
    "sim_satellite_params": {
        "_comment": "currently params are same for every sat",
        "dv_epsilon_Mb" :  1.0,
        "time_epsilon_s": 1,
        "state_simulator": {
            "es_state_update": {
                "add_noise": false,
                "noise_params": {
                    "noise_type": "fractional_normal_edot",
                    "average": 0,
                    "std": 0.01,
                    "min": 0.95,
                    "max": 1.05
                }
            }
        },
        "sat_schedule_arbiter_params" : {
            "_comments": [
                "being conservative with the wait time here, considering how quickly the local planner runs on my machine. but I'm assuming that you wouldn't be able to run a commercial solver (e.g. gurobi) on a spacecraft... well, maybe you could",
                "figured 15 mins (900 seconds) was a good wait time before automatically running the LP again"
            ],
            "replan_release_wait_time_s": 60,
            "allow_lp_execution": true,
            "replan_interval_s": 900
        }
    },
    "sim_gs_network_params": {
        "time_epsilon_s": 1,
        "gsn_ps_params" : {
            "_comments": [
                "replan_release_wait_time_s simulates the amount of time required to actually run the global planner in real life. from the perspective of this code the global planner will run instantaneously. After it runs, the sim will wait this amount of time before making those plans available",
                "release_first_plans_immediately = True means that global planner will immediately make its first set of global plans available (they won't be queued up for release at a later time)",
                "6300 seconds is 105 minutes, about the length of an orbit at 1000 km altitude",
                "replan release time is conservative here"
            ],
            "replan_interval_s": 6300,
            "replan_release_wait_time_s": 60,
            "release_first_plans_immediately": true
        }
    },
    "sim_plot_params": {
        "start_utc": "2016-02-14T04:00:00.000000Z",
        "end_utc": "2016-02-14T12:00:00.000000Z",
        "sat_acts_plot": {
            "time_units": "hours",
            "include_obs_labels": true,
            "include_xlnk_labels": false,
            "include_dlnk_labels": false
        },
        "gs_acts_plot": {
            "include_labels": true,
            "time_units": "hours"
        },
        "energy_usage_plot": {
            "plot_bound_e_min_Wh_delta": -1,
            "plot_bound_e_max_Wh_delta": 1,
            "show_min_max_bounds": true,
            "display_e_min_constraint": false,
            "display_e_max_constraint": false,
            "include_eclipse_windows": true,
            "time_units": "hours"
        },
        "data_usage_plot": {
            "plot_bound_d_min_Gb_delta": -1,
            "plot_bound_d_max_Gb_delta": 1,
            "show_min_max_bounds": true,
            "display_d_min_constraint": false,
            "display_d_max_constraint": false,
            "include_eclipse_windows": true,
            "time_units": "hours"
        },
        "obs_aoi_plot" : {
            "plot_bound_min_aoi_hours": 0,
            "plot_bound_max_aoi_hours": 5,
            "x_axis_time_units": "hours"
        },
        "sat_cmd_aoi_plot" : {
            "plot_bound_min_aoi_hours": 0,
            "plot_bound_max_aoi_hours": 2,
            "x_axis_time_units": "hours"
        },
        "sat_tlm_aoi_plot" : {
            "plot_bound_min_aoi_hours": 0,
            "plot_bound_max_aoi_hours": 2,
            "x_axis_time_units": "hours"
        }
    },
    "sim_metrics_params" : {
        "latency_calculation": {
            "dlnk": "center",
            "obs": "center"
        },
        "targ_id_ignore_list" : [],
        "aoi_units": "hours"
    },
    "sim_run_perturbations": {
        "do_inject_obs": true,
        "injected_observations": [
            {
                "indx": 0,
                "end_utc": "2016-02-14T09:55:37.164153Z",
                "sat_id": "sat4",
                "type": "hardcoded",
                "start_utc": "2016-02-14T09:54:37.164153Z"
            },
            {
                "indx": 1,
                "end_utc": "2016-02-14T12:00:35.483029Z",
                "sat_id": "sat5",
                "type": "hardcoded",
                "start_utc": "2016-02-14T11:59:35.483029Z"
            },
            {
                "indx": 3,
                "end_utc": "2016-02-14T21:23:23.298319Z",
                "sat_id": "sat5",
                "type": "hardcoded",
                "start_utc": "2016-02-14T21:22:23.298319Z"
            },
            {
                "indx": 5,
                "end_utc": "2016-02-14T18:10:00.708361Z",
                "sat_id": "sat1",
                "type": "hardcoded",
                "start_utc": "2016-02-14T18:09:00.708361Z"
            },
            {
                "indx": 6,
                "end_utc": "2016-02-14T04:16:54.450560Z",
                "sat_id": "sat5",
                "type": "hardcoded",
                "start_utc": "2016-02-14T04:15:54.450560Z"
            },
            {
                "indx": 8,
                "end_utc": "2016-02-14T15:12:02.827026Z",
                "sat_id": "sat0",
                "type": "hardcoded",
                "start_utc": "2016-02-14T15:11:02.827026Z"
            },
            {
                "indx": 9,
                "end_utc": "2016-02-14T07:06:41.520948Z",
                "sat_id": "sat3",
                "type": "hardcoded",
                "start_utc": "2016-02-14T07:05:41.520948Z"
            },
            {
                "indx": 10,
                "end_utc": "2016-02-14T16:37:02.412884Z",
                "sat_id": "sat4",
                "type": "hardcoded",
                "start_utc": "2016-02-14T16:36:02.412884Z"
            },
            {
                "indx": 11,
                "end_utc": "2016-02-14T10:06:12.829820Z",
                "sat_id": "sat1",
                "type": "hardcoded",
                "start_utc": "2016-02-14T10:05:12.829820Z"
            },
            {
                "indx": 13,
                "end_utc": "2016-02-14T09:55:20.718866Z",
                "sat_id": "sat2",
                "type": "hardcoded",
                "start_utc": "2016-02-14T09:54:20.718866Z"
            },
            {
                "indx": 15,
                "end_utc": "2016-02-14T20:39:46.383513Z",
                "sat_id": "sat1",
                "type": "hardcoded",
                "start_utc": "2016-02-14T20:38:46.383513Z"
            },
            {
                "indx": 17,
                "end_utc": "2016-02-14T10:55:33.461534Z",
                "sat_id": "sat4",
                "type": "hardcoded",
                "start_utc": "2016-02-14T10:54:33.461534Z"
            },
            {
                "indx": 19,
                "end_utc": "2016-02-14T21:55:09.278231Z",
                "sat_id": "sat1",
                "type": "hardcoded",
                "start_utc": "2016-02-14T21:54:09.278231Z"
            },
            {
                "indx": 20,
                "end_utc": "2016-02-14T18:46:56.198028Z",
                "sat_id": "sat0",
                "type": "hardcoded",
                "start_utc": "2016-02-14T18:45:56.198028Z"
            },
            {
                "indx": 21,
                "end_utc": "2016-02-14T19:43:40.340492Z",
                "sat_id": "sat4",
                "type": "hardcoded",
                "start_utc": "2016-02-14T19:42:40.340492Z"
            },
            {
                "indx": 22,
                "end_utc": "2016-02-14T15:13:31.779520Z",
                "sat_id": "sat0",
                "type": "hardcoded",
                "start_utc": "2016-02-14T15:12:31.779520Z"
            },
            {
                "indx": 24,
                "end_utc": "2016-02-14T14:12:12.058434Z",
                "sat_id": "sat0",
                "type": "hardcoded",
                "start_utc": "2016-02-14T14:11:12.058434Z"
            },
            {
                "indx": 25,
                "end_utc": "2016-02-14T16:22:00.816409Z",
                "sat_id": "sat4",
                "type": "hardcoded",
                "start_utc": "2016-02-14T16:21:00.816409Z"
            },
            {
                "indx": 26,
                "end_utc": "2016-02-14T10:01:28.150822Z",
                "sat_id": "sat2",
                "type": "hardcoded",
                "start_utc": "2016-02-14T10:00:28.150822Z"
            },
            {
                "indx": 27,
                "end_utc": "2016-02-14T08:40:39.036326Z",
                "sat_id": "sat4",
                "type": "hardcoded",
                "start_utc": "2016-02-14T08:39:39.036326Z"
            },
            {
                "indx": 28,
                "end_utc": "2016-02-14T05:02:51.509312Z",
                "sat_id": "sat0",
                "type": "hardcoded",
                "start_utc": "2016-02-14T05:01:51.509312Z"
            },
            {
                "indx": 29,
                "end_utc": "2016-02-14T21:53:18.709511Z",
                "sat_id": "sat5",
                "type": "hardcoded",
                "start_utc": "2016-02-14T21:52:18.709511Z"
            },
            {
                "indx": 31,
                "end_utc": "2016-02-14T19:26:09.145608Z",
                "sat_id": "sat0",
                "type": "hardcoded",
                "start_utc": "2016-02-14T19:25:09.145608Z"
            },
            {
                "indx": 34,
                "end_utc": "2016-02-14T14:00:13.611338Z",
                "sat_id": "sat0",
                "type": "hardcoded",
                "start_utc": "2016-02-14T13:59:13.611338Z"
            },
            {
                "indx": 35,
                "end_utc": "2016-02-14T18:10:56.972232Z",
                "sat_id": "sat3",
                "type": "hardcoded",
                "start_utc": "2016-02-14T18:09:56.972232Z"
            },
            {
                "indx": 36,
                "end_utc": "2016-02-14T17:36:05.824133Z",
                "sat_id": "sat3",
                "type": "hardcoded",
                "start_utc": "2016-02-14T17:35:05.824133Z"
            },
            {
                "indx": 37,
                "end_utc": "2016-02-14T21:31:32.705353Z",
                "sat_id": "sat4",
                "type": "hardcoded",
                "start_utc": "2016-02-14T21:30:32.705353Z"
            },
            {
                "indx": 38,
                "end_utc": "2016-02-14T13:34:49.865042Z",
                "sat_id": "sat5",
                "type": "hardcoded",
                "start_utc": "2016-02-14T13:33:49.865042Z"
            }
        ]
    }

}
